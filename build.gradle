plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jacoco {
    // JaCoCo 버전
    toolVersion = '0.8.11'
}

tasks.test {
    useJUnitPlatform()
    systemProperty "spring.profiles.active", "test"
    finalizedBy tasks.jacocoTestReport
}

tasks.jacocoTestReport {
    dependsOn tasks.test
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
    // 커버리지에서 제외할 클래스가 있으면 여기서 패턴으로 제외
     classDirectories.setFrom(
         files(classDirectories.files.collect {
             fileTree(dir: it, exclude: [
                 'org/example/sansam/**/config/**',
                 'org/example/sansam/**/dto/**',
                 'org/example/sansam/cart/**/**',
                 'org/example/sansam/chat/**/**',
                 'org/example/sansam/exception/**/**',
                 'org/example/sansam/global/**/**',
                 'org/example/sansam/notification/**/**',
                 'org/example/sansam/product/**/**',
                 'org/example/sansam/review/**/**',
                 'org/example/sansam/s3/**/**',
                 'org/example/sansam/search/**/**',
                 'org/example/sansam/user/**/**',
                 'org/example/sansam/wish/**/**',
                 'org/example/sansam/wishlist/**/**',
                 'org/example/sansam/SanSamApplication*',
                 '**/Q*.*', '**/*$Q*.*',
                 'org/example/sansam/timedeal/**/**',
                 'org/example/sansam/stock/**/**',
                 'org/example/sansam/payment/util/IdempotencyKeyUtil.class'
             ])
         })
     )
}

jacocoTestCoverageVerification {
    dependsOn test
    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        'org/example/sansam/**/config/**',
                        'org/example/sansam/**/dto/**',
                        'org/example/sansam/cart/**/**',
                        'org/example/sansam/chat/**/**',
                        'org/example/sansam/exception/**/**',
                        'org/example/sansam/global/**/**',
                        'org/example/sansam/notification/**/**',
                        'org/example/sansam/product/**/**',
                        'org/example/sansam/review/**/**',
                        'org/example/sansam/s3/**/**',
                        'org/example/sansam/search/**/**',
                        'org/example/sansam/user/**/**',
                        'org/example/sansam/wish/**/**',
                        'org/example/sansam/wishlist/**/**'
                ])
            })
    )
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'INSTRUCTION'
                value   = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

tasks.check {
    dependsOn tasks.jacocoTestCoverageVerification
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // --- Spring Boot Starters ---
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // note: data-jpa가 jdbc/aop를 끌어오므로 별도 선언 불필요
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // --- Infra / Clients ---
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'co.elastic.clients:elasticsearch-java:8.11.2'
    implementation 'org.elasticsearch.client:elasticsearch-rest-client:8.11.2'
    implementation 'com.amazonaws:aws-java-sdk-ses:1.12.3'
    implementation 'org.json:json:20240303'
    implementation 'org.springframework.retry:spring-retry' // Boot BOM이 버전 관리

    //상태값 캐싱
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'

    //RabbitMQ설정
    implementation("org.springframework.boot:spring-boot-starter-amqp")
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'


    // --- QueryDSL (Jakarta) ---
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // --- Lombok ---
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    // --- MapStruct ---
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    implementation 'org.mapstruct:mapstruct:1.6.2'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.2'

    // --- DB Driver ---
    runtimeOnly 'com.mysql:mysql-connector-j'

    // --- Test ---
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // spring batch
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    testImplementation 'org.springframework.batch:spring-batch-test'

    //jpa 쿼리 값 확인
    //    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
}

sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated/sources/annotationProcessor/java/main"
        }
    }
    test {
        java {
            srcDirs += "$buildDir/generated/sources/annotationProcessor/java/test"
        }
    }
}